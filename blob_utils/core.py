from google.appengine.ext import blobstore
from google.appengine.api import urlfetch
import urlparse
import re
import logging
from google.appengine.api import images
from db.models import *

__all__ = ['file_upload', 'blob_upload', 'url_upload']

def file_upload(file_name, file_content, content_type=False, img_width=300, img_height=300):
    #logging.info('file_upload::file_name --> %s' % file_name)
    import base64
    from file_post import post_multipart
    upload_url = blobstore.create_upload_url('/blob_upload/')
    logging.info('upload url: %s' % upload_url)
    urlinfo = urlparse.urlparse(upload_url)

    path = urlinfo.path
    hostname = urlinfo.hostname
    scheme = urlinfo.scheme
    query = urlinfo.query

    # file_name need transform to avoid file name illegal
    file_name = base64.b64encode(file_name)

    logging.info('file_name encoded: %s' % file_name)

    url = hostname
    logging.info('hostname: %s' % url)
    logging.info('urlinfo.path: %s' % path)
    logging.info('urlinfo.query: %s' % query)
    
    files = [("default", file_name, file_content, content_type)]

    # post_multipart --> do file upload to certain url
    if query:
        blob_key = post_multipart(url, path+"?"+query, {}, files)
    else:
        blob_key = blob_key = post_multipart(url, path, {}, files)

    # key to fetch blob data
    logging.info('blob_key: %s' % blob_key)
    return blobstore.BlobInfo.get(blob_key), blob_key, img_width, img_height

def blob_upload(file_content, file_name=False, content_type=False):
    if not file_content or not file_name or not content_type:
        return False

    file_name = file_name or "default"
    # which generated by binary content(string type) of image
    img = images.Image(file_content)

    return file_upload(file_name, file_content, content_type, img.width, img.height)

def url_upload(url, file_name=False, content_type=False):
    f = urlfetch.fetch(url)
    logging.info(f)
    content_type = content_type or f.headers['content-type']
    file_name = file_name or "default"
    # file_content --> binary content of image
    file_content = f.content
    img = images.Image(file_content)

    return file_upload(file_name, file_content, content_type, img.width, img.height)
